--- a/mappers/date.inc
+++ b/mappers/date.inc
@@ -53,25 +68,141 @@
  * Callback for setting date values.
  */
 function date_feeds_set_target(FeedsSource $source, $entity, $target, array $values, array $mapping) {
-  list($field_name, $sub_field) = explode(':', $target, 2);
+  list($target, $sub_field) = explode(':', $target, 2);
+
+  $value_key = $sub_field === 'start' ? 'value' : 'value2';
+  $offset_key = $sub_field === 'start' ? 'offset' : 'offset2';
+
+  $field = isset($entity->$target) ? $entity->$target : array(LANGUAGE_NONE => array());
+
+  $info = field_info_field($target);
+  $format = date_type_format($info['type']);
+
+  $db_tz = new DateTimeZone(date_get_timezone_db($info['settings']['tz_handling']));
+  $default_tz = new DateTimeZone(_date_feeds_get_default_timezone($mapping));
 
   $delta = 0;
   foreach ($values as $value) {
+    $value = _date_feeds_get_date_object($value, $default_tz);
 
-    if (!($value instanceof FeedsDateTimeElement)) {
-
-      if (empty($value) || !is_numeric($value) && is_string($value) && !date_create($value)) {
-        $value = new FeedsDateTimeElement(NULL, NULL);
-      }
-      elseif ($sub_field == 'end') {
-        $value = new FeedsDateTimeElement(NULL, $value);
-      }
-      else {
-        $value = new FeedsDateTimeElement($value, NULL);
+    if (!$value || !empty($value->errors)) {
+      $field[LANGUAGE_NONE][$delta][$value_key] = '';
+    }
+    else {
+      if (!isset($field[LANGUAGE_NONE][$delta]['timezone'])) {
+        $field[LANGUAGE_NONE][$delta]['timezone'] = $value->getTimezone()->getName();
       }
+
+      $value->setTimezone($db_tz);
+
+      $field[LANGUAGE_NONE][$delta][$value_key] = $value->format($format, TRUE);
+      $field[LANGUAGE_NONE][$delta][$offset_key] = $value->getOffset();
     }
 
-    $value->buildDateField($entity, $field_name, $delta, $mapping['language']);
     $delta++;
   }
+
+  $entity->$target = $field;
+}
+
+/**
+ * Summary callback for date field targets.
+ */
+function date_feeds_summary_callback(array $mapping, $target, array $form, array $form_state) {
+  $mapping += array('timezone' => '__SITE__');
+
+  $options = _date_feeds_timezone_options();
+
+  return t('Default timezone: %zone', array('%zone' => $options[$mapping['timezone']]));
+}
+
+/**
+ * Form callback for date field targets.
+ */
+function date_feeds_form_callback(array $mapping, $target, array $form, array $form_state) {
+  $mapping += array('timezone' => '__SITE__');
+
+  return array(
+    'timezone' => array(
+      '#type' => 'select',
+      '#title' => t('Timezone handling'),
+      '#options' => _date_feeds_timezone_options(),
+      '#default_value' => $mapping['timezone'],
+      '#description' => t('This value will only be used if the timezone is mising.'),
+    ),
+  );
+}
+
+/**
+ * Returns the timezone options.
+ *
+ * @return array
+ *   A map of timezone options.
+ */
+function _date_feeds_timezone_options() {
+  return array(
+    '__SITE__' => t('Site default'),
+  ) + system_time_zones();
+}
+
+/**
+ * Returns the timezone to be used as the default.
+ *
+ * @param array $mapping
+ *   The mapping array.
+ *
+ * @return string
+ *   The timezone to use as the default.
+ */
+function _date_feeds_get_default_timezone(array $mapping) {
+  $mapping += array('timezone' => '__SITE__');
+
+  if ($mapping['timezone'] === '__SITE__') {
+    return variable_get('date_default_timezone', 'UTC');
+  }
+
+  return $mapping['timezone'];
+}
+
+/**
+ * Converts a date string or object into a DateObject.
+ *
+ * @param DateTime|string|int $value
+ *   The date value or object.
+ * @param DateTimeZone $default_tz
+ *   The default timezone.
+ *
+ * @return DateObject
+ *   The converted DateObject.
+ */
+function _date_feeds_get_date_object($value, DateTimeZone $default_tz) {
+  if ($value instanceof DateObject) {
+    return $value;
+  }
+
+  // Convert DateTime and FeedsDateTime.
+  if ($value instanceof DateTime) {
+    if (!$value->getTimezone() || !preg_match('/[a-zA-Z]/', $value->getTimezone()->getName())) {
+      $value->setTimezone($default_tz);
+    }
+    return new DateObject($value->format(DATE_FORMAT_ISO), $value->getTimezone());
+  }
+
+  if (is_string($value) || is_object($value) && method_exists($value, '__toString')) {
+    $value = trim($value);
+  }
+
+  // Filter out meaningless values.
+  if (empty($value) || !is_string($value) && !is_int($value)) {
+    return FALSE;
+  }
+
+  // Support year values.
+  if ((string) $value === (string) (int) $value) {
+    if ($value >= variable_get('date_min_year', 100) && $value <= variable_get('date_max_year', 4000)) {
+      return new DateObject('January ' . $value, $default_tz);
+    }
+  }
+
+  return new DateObject($value, $default_tz);
 }
